---
    -   hosts: 127.0.0.1
        connection: local
        become: yes
        remote_user: root
        vars:
             postgres_user: "postgres"
             postgres_password: "12345678"  # Em produção, melhor criptografar via Ansible Vault
             postgres_db1: "access-control"
             postgres_db2: "data-reports"
             postgres_container_name: "postgres-17"
             postgres_image: "postgres:17"
             NOME_REDE_DOCKER: 'embrapi'
             SUBREDE_INTERNA: '192.187.3.0/24'
             docker_apt_key: /etc/apt/keyrings/docker.gpg
             docker_repo: "deb [arch=amd64 signed-by={{ docker_apt_key }}] https://download.docker.com/linux/ubuntu mantic stable"
        tasks:
                        
            - name: Remover versões antigas do Docker
              apt:
                name: "{{ item }}"
                state: absent
                purge: yes
              loop:
                - docker
                - docker-engine
                - docker.io
                - containerd
                - runc

            - name: Instalar dependências necessárias
              apt:
                name:
                  - ca-certificates
                  - curl
                  - gnupg
                  - lsb-release
                state: present
                update_cache: true

            - name: Criar diretório para chave GPG do Docker
              file:
                path: /etc/apt/keyrings
                state: directory
                mode: '0755'

            - name: Adicionar chave GPG oficial do Docker
              ansible.builtin.get_url:
                url: https://download.docker.com/linux/ubuntu/gpg
                dest: "{{ docker_apt_key }}"
                mode: '0644'
              register: gpg_key
                        
            - name: Convert GPG key to dearmored format (if needed)
              shell: |
                gpg --dearmor < {{ docker_apt_key }} > {{ docker_apt_key }}.tmp && mv {{ docker_apt_key }}.tmp {{ docker_apt_key }}
              when: gpg_key.changed
           
            - name: Adicionar repositório do Docker
              apt_repository:
                repo: "{{ docker_repo }}"
                state: present
                filename: docker

            - name: Atualizar cache do APT
              apt:
                update_cache: true

            - name: Instalar Docker Engine e componentes
              apt:
                name:
                  - docker-ce
                  - docker-ce-cli
                  - containerd.io
                  - docker-buildx-plugin
                  - docker-compose-plugin
                state: present

            - name: Adicionar usuário atual ao grupo docker
              user:
                name: "{{ ansible_user }}"
                groups: docker
                append: yes

            - name: Garantir que o serviço Docker esteja iniciado e habilitado
              systemd:
                name: docker
                enabled: true
                state: started

            - name: Criar rede interna Docker para microsserviços
              shell: |
                docker network inspect {{ NOME_REDE_DOCKER }} || \
                docker network create --subnet={{ SUBREDE_INTERNA }} --driver bridge {{ NOME_REDE_DOCKER }}
              args:
                executable: /bin/bash

            - name: Verificar se o container PostgreSQL já existe
              shell: |
                docker ps -a --format '{{ "{{.Names}}" }}' | grep -w {{ postgres_container_name }} || true
              args:
                executable: /bin/bash
              register: postgres_container_check

            - name: Criar script de inicialização SQL para múltiplos bancos
              copy:
                dest: "/tmp/init-multiple-dbs.sql"
                content: |
                  CREATE DATABASE "{{ postgres_db1 }}";
                  CREATE DATABASE "{{ postgres_db2 }}";
                mode: '0644'
              when: postgres_container_check.stdout == ""

            - name: Subir container PostgreSQL 17 na rede interna usando shell
              shell: |
                docker run -d --name {{ postgres_container_name }} \
                  --network {{ NOME_REDE_DOCKER }} \
                  -e POSTGRES_USER={{ postgres_user }} \
                  -e POSTGRES_PASSWORD={{ postgres_password }} \
                  postgres:17
              args:
                executable: /bin/bash
                creates: "/var/lib/docker/containers/{{ postgres_container_name }}"
              when: postgres_container_check.stdout == ""

            - name: Copiar script SQL para o container
              shell: |
                docker cp /tmp/init-multiple-dbs.sql {{ postgres_container_name }}:/docker-entrypoint-initdb.d/init-multiple-dbs.sql
              args:
                executable: /bin/bash
              when: postgres_container_check.stdout == ""

            - name: Reiniciar container PostgreSQL para executar script de criação dos bancos
              shell: |
                docker restart {{ postgres_container_name }}
              args:
                executable: /bin/bash
              when: postgres_container_check.stdout == ""






